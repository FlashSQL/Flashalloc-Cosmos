#
# Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
#
# ==== Purpose ====
#
# This test script serves as the functionality testing for the table
# performance_schema.replication_execute_status_by_coordinator. Test
# for ddl and dml operations is a part of the perfschema suite.
# The ddl/dml tests are named:
# 1) ddl_replication_execute_status_by_worker.test and
# 2) dml_replication_execute_status_by_worker.test.
#
# This test script does the following:

#  - Verify that SELECT works for every field in the table.
#  - The SELECT per field produces an output similar to the corresponding field
#    in SHOW SLAVE STATUS(SSS), if there is one.
#  - If there is no matching field in SSS, we resort to other method of testing
#    those fields.
#  - We perform all the testing on connection "slave". On master, the table
#    returns an empty set.
#
# The follwing scenarios are tested in this test script:
#
#  - Test each field on a fresh replication setup.
#  - Introduce error in worker thread and check for the correctness of error
#    error number, message and timestamp.
#  - Verify that, the change in values are correctly shown by the table.
#  - Verify that the values are preserved after STOP SLAVE.
#  - Set up replication in gtid-mode=on and test 'Last_Seen_Transaction' field.
#  - Verify that the value in 'Last_Seen_Transaction' field is preserved after
#    STOP SLAVE.
#
#  ==== Related Worklog ====
#
#  WL#3656: PERFORMANCE SCHEMA table for SHOW SLAVE STATUS
#

source include/master-slave.inc;
source include/have_binlog_format_mixed.inc;

call mtr.add_suppression("Error 'Table 'test.t' doesn't exist' on query.");
call mtr.add_suppression("The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state.");
call mtr.add_suppression("Request to stop slave SQL Thread received while applying a group that has non-transactional changes;");

let $assert_text= On master, the table should return an empty set.;
let $assert_cond= [select count(*) from performance_schema.replication_execute_status_by_worker] = 0;
source include/assert.inc;

--echo
--echo # Setup MTS and performa testing on a fresh slave.
--echo

--connection slave

# PB2 runs the tests with slave-parallel-worker=4 in a combination.
# Reset it to 0 beacause the following test for empty set is valid only
# in non-MTS slave.

source include/stop_slave.inc;
SET @save.slave_parallel_workers=@@global.slave_parallel_workers;
SET @@global.slave_parallel_workers=0;
# to avoid warnings
set @save.slave_transaction_retries= @@global.slave_transaction_retries;
source include/start_slave.inc;

let $assert_text= In non-MTS mode(SQL thread), the table should return an empty set.;
let $assert_cond= [select count(*) from performance_schema.replication_execute_status_by_worker] = 0;
source include/assert.inc;

source include/stop_slave.inc;
SET @@global.slave_parallel_workers=1;
# to avoid warnings
set @save.slave_transaction_retries= @@global.slave_transaction_retries;
source include/start_slave.inc;

let $ps_value= query_get_value(select Worker_Id from performance_schema.replication_execute_status_by_worker, Worker_Id, 1);
let $assert_text= Worker_Id should be 0;
let $assert_cond= "$ps_value"= 0;
source include/assert.inc;

# To verify that the worker thread_id is correctly shown by PS table, find the
# row in SHOW PROCESSLIST that corresponds to worker thread and extract the
# Id field shown in that row.
# This is implemented by dumping the SHOW PROCESSLIST output in a file
# and looking for the string "Waiting for an event from Coordinator" in a line
# in the dumped file. The Id field in the that line is then extracted to obtain
# the worker thread_id.

let $out_file=$MYSQLTEST_VARDIR/tmp/show_processlist_output.txt;
exec $MYSQL_SLAVE -e "show processlist" > $out_file;
let INPUT_FILE= $out_file;
let $ps_value= query_get_value(select Thread_Id from performance_schema.replication_execute_status_by_worker, Thread_Id, 1);
let WORKER_THREAD_ID= $ps_value ;

perl;
use strict;
my $input_file= $ENV{'INPUT_FILE'} or die "INPUT_FILE not set\n";
my $worker_thread_id= $ENV{'WORKER_THREAD_ID'} or die "SQL_THREAD_ID not set\n";
open(IN_FILE, "$input_file") or die("Unable to open '$input_file': $!\n");
while (<IN_FILE>)
{
  if (/(\d+)(.*?)(Waiting\s+for\s+an\s+event\s+from\s+Coordinator)(.*?)$/)
  {
    if ($worker_thread_id == $1)
    {
      print "worker thread id extracted from SHOW PROCESSLIST and PS table match.\n";
    }
    else
    {
      print "worker thread id extracted from SHOW PROCESSLIST and PS table do NOT match.\n";
    }
  }
}

close(IN_FILE);
EOF

remove_file $out_file;

# End of perl code for worker's thread_id testing.

let $ps_value= query_get_value(select Service_State from performance_schema.replication_execute_status_by_worker, Service_State, 1);
let $assert_text= Service_State should be "ON" on a fresh slave server.;
let $assert_cond= "$ps_value"= "ON";
source include/assert.inc;

let $ps_value= query_get_value(select Last_Seen_Transaction from performance_schema.replication_execute_status_by_worker, Last_Seen_Transaction, 1);
let $assert_text= Last_Seen_Transaction should show "ANONYMOUS" if gtid-mode=off.;
let $assert_cond= "$ps_value" = "ANONYMOUS";
source include/assert.inc;

let $sss_value= query_get_value(SHOW SLAVE STATUS, Last_SQL_Errno, 1);
let $ps_value= query_get_value(select Last_Error_Number from performance_schema.replication_execute_status_by_worker, Last_Error_Number, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Number should be same.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

let $sss_value= query_get_value(SHOW SLAVE STATUS, Last_SQL_Error, 1);
let $ps_value= query_get_value(select Last_Error_Message from performance_schema.replication_execute_status_by_worker, Last_Error_Message, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Message should both be empty.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

let $sss_value= query_get_value(SHOW SLAVE STATUS, Last_SQL_Error_Timestamp, 1);
let $ps_value= query_get_value(select Last_Error_Timestamp from performance_schema.replication_execute_status_by_worker, Last_Error_Timestamp, 1);
let $assert_text= Value returned by PS table for Last_Error_Timestamp should be 0000-00-00 00:00:00.;
let $assert_cond= "$ps_value" = "0000-00-00 00:00:00";
source include/assert.inc;

--echo
--echo # Introduce an error in the worker thread and check for the correctness
--echo # of error number, message and timestamp fields.
--echo

# Cause an error in Worker thread.
# 1) Ceate a table 't' at master, replicate at slave.
# 2) Drop table 't' at slave only.
# 3) Insert a value in table 't' on master and replicate on slave.
# Since slave doesnt have table 't' anymore, worker thread will report an error.

--connection master
use test;
create table t(a int primary key);
sync_slave_with_master;
drop table t;
--connection master
insert into t values(1);
--connection slave
let $slave_sql_errno=1146;
source include/wait_for_slave_sql_error.inc;

--echo
--echo # Extract the error related fields from SSS and PS table and compare
--echo # them for correctness.
--echo

let $sss_value= query_get_value(SHOW SLAVE STATUS, Last_SQL_Errno, 1);
let $ps_value= query_get_value(select Last_Error_Number from performance_schema.replication_execute_status_by_worker, Last_Error_Number, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Number should be same.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

--disable_query_log
select Last_Error_Message from performance_schema.replication_execute_status_by_worker;
--enable_query_log

# The timestamp format is slightly different in SSS and PS.
# SSS => YYMMDD HH:MM:SS
# PS  => YYYY-MM-DD HH:MM:SS
# To match the two, we get rid of hyphons from PS output and first two digits
# the year field so that it can be matched directly.

let $sss_value= query_get_value(SHOW SLAVE STATUS, Last_SQL_Error_Timestamp, 1);
let $ps_value= query_get_value(select Last_Error_Timestamp from performance_schema.replication_execute_status_by_worker, Last_Error_Timestamp, 1);
let $ps_value_without_hyphons= `SELECT REPLACE("$ps_value", '-', '')`;
let $ps_value_in_sss_format= `select substring("$ps_value_without_hyphons", 3)`;
let $assert_text= Value returned by SSS and PS table for Last_Error_Timestamp should be same.;
let $assert_cond= "$sss_value" = "$ps_value_in_sss_format";
source include/assert.inc;

--echo
--echo # Verify that the error fields are preserved after STOP SLAVE.
--echo

--echo
--echo # 1. Verify that thread_id changes to NULL and service_state to "off" on
--echo #    STOP SLAVE.
--echo

let $ps_value= query_get_value(select thread_id from performance_schema.replication_execute_status_by_worker, thread_id, 1);
let $assert_text= After STOP SLAVE, thread_id should be NULL;
let $assert_cond= "$ps_value" = "NULL";
source include/assert.inc;

let $ps_value= query_get_value(select Service_State from performance_schema.replication_execute_status_by_coordinator, Service_State, 1);
let $assert_text= So, Service_State after STOP SLAVE should be "OFF".;
let $assert_cond= "$ps_value"= "OFF";
source include/assert.inc;

--echo
--echo # 2. Extract the worker_id and the error related fields from SSS and PS
--echo #    table and compare them. These fields should preserve their values.
--echo

let $ps_value= query_get_value(select Worker_Id from performance_schema.replication_execute_status_by_worker, Worker_Id, 1);
let $assert_text= Worker_Id should be 0;
let $assert_cond= "$ps_value"= 0;
source include/assert.inc;

let $sss_value= query_get_value(SHOW SLAVE STATUS, Last_SQL_Errno, 1);
let $ps_value= query_get_value(select Last_Error_Number from performance_schema.replication_execute_status_by_worker, Last_Error_Number, 1);
let $assert_text= Value returned by SSS and PS table for Last_Error_Number should be same.;
let $assert_cond= "$sss_value" = "$ps_value";
source include/assert.inc;

--disable_query_log
select Last_Error_Message from performance_schema.replication_execute_status_by_worker;
--enable_query_log

# The timestamp format is slightly different in SSS and PS.
# SSS => YYMMDD HH:MM:SS
# PS  => YYYY-MM-DD HH:MM:SS
# To match the two, we get rid of hyphons from PS output and first two digits
# the year field so that it can be matched directly.

let $sss_value= query_get_value(SHOW SLAVE STATUS, Last_SQL_Error_Timestamp, 1);
let $ps_value= query_get_value(select Last_Error_Timestamp from performance_schema.replication_execute_status_by_worker, Last_Error_Timestamp, 1);
let $ps_value_without_hyphons= `SELECT REPLACE("$ps_value", '-', '')`;
let $ps_value_in_sss_format= `select substring("$ps_value_without_hyphons", 3)`;
let $assert_text= Value returned by SSS and PS table for Last_Error_Timestamp should be same.;
let $assert_cond= "$sss_value" = "$ps_value_in_sss_format";
source include/assert.inc;

stop slave;
reset slave;
--connection master
drop table t;
reset master;

--echo
--echo # Set up replication in gtid-mode=on and test 'Last_Seen_Transaction'
--echo # field.
--echo

let $rpl_server_number= 1;
let $rpl_start_with_gtids= 1;
source include/rpl_restart_server.inc;

let $rpl_server_number= 2;
let $rpl_start_with_gtids= 1;
source include/rpl_restart_server.inc;

--connection slave
stop slave;
replace_result $MASTER_MYPORT MASTER_MYPORT;
replace_column 2 ####;
eval change master to master_host='127.0.0.1',master_port=$MASTER_MYPORT, master_user='root';
SET @save.slave_parallel_workers=@@global.slave_parallel_workers;
SET @@global.slave_parallel_workers=1;
# to avoid warnings
set @save.slave_transaction_retries= @@global.slave_transaction_retries;
start slave;

--connection master
create database d1;
create table d1.t1(a int);
insert into d1.t1 values(1);
let $MASTER_UUID= query_get_value(`SHOW VARIABLES LIKE '%server_uuid%'`, Value, 1);

sync_slave_with_master;

replace_result $MASTER_UUID MASTER_UUID;
query_vertical select Last_Seen_Transaction from performance_schema.replication_execute_status_by_worker;

--echo
--echo # Verify that the value in 'Last_Seen_Transaction' field is preserved
--echo # after STOP SLAVE.
--echo

source include/stop_slave.inc;
replace_result $MASTER_UUID MASTER_UUID;
query_vertical select Last_Seen_Transaction from performance_schema.replication_execute_status_by_worker;

--echo
--echo # Cleanup.
--echo

set @@global.slave_parallel_workers= @save.slave_parallel_workers;
set @@global.slave_transaction_retries= @save.slave_transaction_retries;
source include/start_slave.inc;

source include/rpl_end.inc;
